#! /usr/bin/env python
import Queue
import threading
import time
import serial
import os
import signal
import sys
import sqlite3
import operator
#------------------------------------------------------------------------------
#				Table Name: CMD_TABLE
#			Description: Used to define the command byte
#------------------------------------------------------------------------------
CMD_TABLE = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20',
			 '21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40',
			 '41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60',
			 '61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80',
			 '81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','a0',
			 'a1','a2','a3','a4','a5','a6','a7','a8','a9','b0','b1','b2','b3','b4','b5','b6','b7','b8','b9','c0',
			 'c1','c2','c3','c4','c5','c6','c7','c8','c9','d0','d1','d2','d3','d4','d5','d6','d7','d8','d9','e0',
			 'e1','e2','e3','e4','e5','e6','e7','e8','e9','f0','f1','f2']
#-----------------------------------------------------------------------------
#				Fucntion Name: db_create
#				Parameters: format is a string to indicate how to create the table,
#							table id is initiate automatically
#			Author: Daniel Chai
#		Modified Date: 9/25/2012
#	Description: Used to create  database
#-----------------------------------------------------------------------------
def db_create(databasename='',tablename='',format=''):
	conn = sqlite3.connect(databasename)
	c = conn.cursor()
	c.execute("select count(type) from sqlite_master where type = 'table' and name = '%s'" % tablename)
	num = c.fetchone()
	if num[0] == 0:
		c.execute("create table %s (id integer primary key,%s)" % (tablename,format))
	c.close()

#-------------------------------------------------------------------------------------------
#			Function Name: insertdatabase(databasename,tablename,createflag,recordlis)
#		Parameters: recordlist----(a list a record will be inserted into table--tablename)
#			Author: Daniel Chai
#		Modified Data: 9/25/2012
#	Description: Used to insert the data into database
#--------------------------------------------------------------------------------------------
def db_insert(databasename='',tablename='',recordlist=[]):
	conn = sqlite3.connect(databasename)
	c = conn.cursor()
	#conn.executemany("insert into device values (NULL,%s,%s)",%recordlist)
	conn.commit()
	c.close()

#-------------------------------------------------------------------------------------
#				Fucntion Name:
#
#-------------------------------------------------------------------------------------
def db_select(databasename='', tablename='', createflag=0, timestamp=0):
	conn = sqlite3.connect(databasename)
	c = conn.cursor()
	c.execute("select count(type) from sqlite_master where type = 'table' and name = '%s'" % tablename)
	num = c.fetchone()
	if num[0] == 0:
		if createflag == 1:
			c.execute("create table %s (id integer primary key,mesg_info text,par float)" % tablename)
	else:
		c.execute("select * from %s where id > %d" % (tablename,timestamp))
		recordlist = c.fetchall()
		print recordlist
#-----------------------------------------------------------------------
#				Class Name: ExeCmdThread 
#
#
#------------------------------------------------------------------------
class ExeCmdThread(threading.Thread):
	def __init__(self,id,name):
		threading.Thread.__init__(self)
		self.id = id
		self.name = name
	def run(self):
		threading.Thread.__init__(self)
		print "ExeCmdThread is running", serial_thread_que.get()
#-----------------------------------------------------------------------
#		Convert a integer to "0x" format then convert to '\x'
#		Because '\x' is for sending
#-----------------------------------------------------------------------
def convert_to_hex(arg):
	res = chr(int(hex(arg),8))
	return res

#------------------------------------------------------------------------
#			Function Name: crc_generate
#		Description: generate the checksum for 
#------------------------------------------------------------------------
def crc_generate(mesg_pack=[]):
	print mesg_pack
	crc = 0
	print crc
	for mesg in mesg_pack:
		crc  += ord(mesg)
	crc = (~crc & (2**8 -1)) + 0x01
	crc =  convert_to_hex(crc)
	print crc
	return crc

#------------------------------------------------------------------------
#				Function Name: crc_check
#				Parameters: Receieved message
#			Author: Daniel Chai
#		Modified Date: 9/26/2012
#	Description: Check the correction of the message
#------------------------------------------------------------------------
def crc_check(mesg_pack=[]):
	# This print is for debug
	crc = 0
	crc = crc_generate(mesg_pack[:-1])
	if crc == ord(mesg_pack[-1]):
		return True
	else:
		return False	

#------------------------------------------------------------------------
#				Function Name: send_resp(resp_pack_mesg)
#------------------------------------------------------------------------
def send_resp(mesg_pack=[],argsize=0,args=''):
	resp_mesg_pack = generate_resp_pack(mesg_pack,argsize,args)
	try:
		ser = serial_thread_que.get()
		# convert the list to string to send
		ser.write(''.join(resp_mesg_pack))
		ser = serial_thread_que.put(ser)
	except serial.SerialTimeoutException:
		ser = serial_thread_que.put(ser)
		raise
		return
#------------------------------------------------------------------------
#
#------------------------------------------------------------------------
def generate_resp_pack(mesg_pack=[],argsize=0,args=''):
	mesg_pack[3] = chr(ord(mesg_pack[3]) +1 )
	temp = mesg_pack[1]
	mesg_pack[1] = mesg_pack[2]
	mesg_pack[2] = temp
	mesg_pack.append(convert_to_hex(argsize))
	if argsize == 0:
		crc = crc_generate(mesg_pack)
		mesg_pack.append(crc)
	#print "generated",mesg_pack
	return mesg_pack

#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
#		Function Name: process_cmd
#	Description: It is used to deal with the command message
#-----------------------------------------------------------------------
def process_cmd(mesg_pack=[]):
	print "received",mesg_pack
	crc_generate(mesg_pack[:-1])
	#cmd_str = []
	#if crc_check(mesg_pack) == True:
	#	#This printf is for debug, == True just for test
	#	print "False"
	#	mesg_pack[4] = chr(0x15)
	#	send_resp(mesg_pack[:5])
	#	return 
	#for mesg in mesg_pack:
	#	cmd_str.append(mesg.encode('hex'))
	#if cmd_str[4] not in CMD_TABLE:
	#	mesg_pack[4] = chr(0x15)
	#	send_resp(mesg_pack[:5])
	return
	
		 
	
		
#-------------------------------------------------------------
#				Class Name: CheckSerialThread
#			Author:Daniel Chai 
#		Last Modified: 09/25/2012
#	Description: The thread used to check a certain string
#-------------------------------------------------------------
class CheckSerialThread(threading.Thread):
	def __init__(self,id,name,counter,buff):
		threading.Thread.__init__(self)
		self.id = id
		self.name = name
		self.counter = counter
		self.buff = buff
	def run(self):
		#print "Thread is running\n"
		threading.Thread.__init__(self)
		ser = serial.Serial(port = '/dev/ttyS3',baudrate = 115200,parity = serial.PARITY_NONE,stopbits = serial.STOPBITS_ONE,bytesize = serial.EIGHTBITS)
		serial_thread_que.put(ser)
		if ser.isOpen() != 'True':
			ser.open()
		str = ''
		cmdlen = 256
		cmd = []
		state = 0
		try:
			while 1:
				con = ser.read()
				str = str + con
				#s = ''.join(["0x%2x"%ord(con)])
				#s = ord(con)
				#print s
				if con == 'T':
					if str[-6:] == "$SDDBT":
						print str[-6:]
						# call user defined function to deal with this event
						ser.flush()
						thread_result.put(str[-6:])
						exit()
					else:
						continue
				if con == '!' or state > 0:
					print "! is here",state
					cmd.append(con)
					if state > 0:
						x = con.encode('hex')
					if state == 5:
						cmdlen = int(x) + 7 - 1
						print cmdlen
					if state >= cmdlen:
						state = 0 
						process_cmd(cmd)
						cmd = []
						ser.flush()
					else:
						state += 1
						continue
		except KeyboardInterrupt:
				print "close"
				ser.close()
				raise
				exit()


def handler(signum, frame):
	try:
		print "hadle",thread_result.get()
	except Queue.Empty:
		pass
	db_create("pythondata.db","test","timestamp double,par float")	
	db_insert("pythondata.db","student",[(3.4,1)])
	db_select("pythondata.db","student",timestamp = 4)
	print('Signal handler called with signal', signum)

if __name__ == '__main__':
	input = 1
	out = ''
	now = ''
	#db_create("pythondata.db","device","name text, devid text")
	#db_insert("pythondata.db","device",['iSIC','v0.3'])
	thread_result = Queue.Queue()
	serial_thread_que = Queue.Queue()
	signal.signal(signal.SIGUSR1,handler)
	thread1 = CheckSerialThread(1,"ListenSerial",1,'')
	#thread2 = ExeCmdThread(1,"ProcessSerial")
	thread1.setDaemon(True)
	#thread2.setDaemon(True)
	thread1.start()
	#thread2.start()
	with open("/home/sampler/table.csv","a") as f: 
		try:
			while 1:
				time.sleep(1)
				print "Start reading"
			#	if thread1.isAlive() == False:
			#		thread1.setDaemon(True)
			#		thread1.start()
		except KeyboardInterrupt:
				# Exit the code when Ctrl+C pressed
				exit()
